import * as anchor from "@coral-xyz/anchor";
import { PublicKey } from "@solana/web3.js";

// Betting program interface - would typically be auto-generated by Anchor
export type Betting = {
  "version": "0.1.0",
  "name": "shin2chin-betting",
  "instructions": [
    {
      "name": "createEvent",
      "accounts": [
        {
          "name": "admin",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "event",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "teamA",
          "type": "string"
        },
        {
          "name": "teamB",
          "type": "string"
        },
        {
          "name": "startTime",
          "type": "i64"
        },
        {
          "name": "endTime",
          "type": "i64"
        }
      ]
    },
    {
      "name": "placeBet",
      "accounts": [
        {
          "name": "bettor",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "event",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bet",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userStats",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "teamPick",
          "type": "u8"
        },
        {
          "name": "amount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "submitResult",
      "accounts": [
        {
          "name": "oracle",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "event",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "teamAScore",
          "type": "u32"
        },
        {
          "name": "teamBScore",
          "type": "u32"
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "EventAccount",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "admin",
            "type": "publicKey"
          },
          {
            "name": "teamA",
            "type": "string"
          },
          {
            "name": "teamB",
            "type": "string"
          },
          {
            "name": "bettingOpen",
            "type": "bool"
          },
          {
            "name": "startTime",
            "type": "i64"
          },
          {
            "name": "endTime",
            "type": "i64"
          },
          {
            "name": "totalPoolAmount",
            "type": "u64"
          },
          {
            "name": "teamAAmount",
            "type": "u64"
          },
          {
            "name": "teamBAmount",
            "type": "u64"
          },
          {
            "name": "resultSubmitted",
            "type": "bool"
          },
          {
            "name": "teamAScore",
            "type": "u32"
          },
          {
            "name": "teamBScore",
            "type": "u32"
          },
          {
            "name": "winningTeam",
            "type": "u8"
          },
          {
            "name": "settled",
            "type": "bool"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "BetAccount",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bettor",
            "type": "publicKey"
          },
          {
            "name": "event",
            "type": "publicKey"
          },
          {
            "name": "teamPick",
            "type": "u8"
          },
          {
            "name": "amount",
            "type": "u64"
          },
          {
            "name": "matched",
            "type": "bool"
          },
          {
            "name": "paidOut",
            "type": "bool"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "UserStatsAccount",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bettor",
            "type": "publicKey"
          },
          {
            "name": "totalBets",
            "type": "u64"
          },
          {
            "name": "totalWins",
            "type": "u64"
          },
          {
            "name": "totalAmountBet",
            "type": "u64"
          },
          {
            "name": "totalAmountWon",
            "type": "u64"
          },
          {
            "name": "lastBetTime",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    }
  ]
};

// Helper functions for client-side interaction
export class BettingClient {
  program: anchor.Program<Betting>;
  
  constructor(program: anchor.Program<Betting>) {
    this.program = program;
  }
  
  // Find the PDA for an event account
  async findEventAddress(eventId: string): Promise<[PublicKey, number]> {
    return await PublicKey.findProgramAddress(
      [Buffer.from("event"), Buffer.from(eventId)],
      this.program.programId
    );
  }
  
  // Find the PDA for a bet account
  async findBetAddress(eventPda: PublicKey, bettor: PublicKey): Promise<[PublicKey, number]> {
    return await PublicKey.findProgramAddress(
      [Buffer.from("bet"), eventPda.toBuffer(), bettor.toBuffer()],
      this.program.programId
    );
  }
  
  // Find the PDA for a user stats account
  async findUserStatsAddress(bettor: PublicKey): Promise<[PublicKey, number]> {
    return await PublicKey.findProgramAddress(
      [Buffer.from("user_stats"), bettor.toBuffer()],
      this.program.programId
    );
  }
}